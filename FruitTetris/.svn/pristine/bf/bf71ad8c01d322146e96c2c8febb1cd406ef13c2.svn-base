/*
CMPT 361 Assignment 1 - FruitTetris
BY: Costin Ghiocel
SN: 301027183
 */



/*
 * I did a pretty poor and hasty job on Assignment 1 as i was in a bit of a rush, everything in 1 file with no header
 * is very poor design, i also had very stiff functions, poor naming conventions and a severe lack of modularity.
 *
 * Plan:
 * 	- Statics.h
 * 		* contains all definitions and enums for naming or type defs.
 * 		* renaming important things ensures i update everything properly and don't miss anything
 * 	- Methods.h
 * 		* will contain functions that manipulate map data such as collision detection etc..
 *
 * 	I'm not familiar enough with OpenGL design to go for an Object Oriented approach, it also seems as
 * 	this was designed for C, so it's better to just organize libraries.
 *
 */

#include "Methods.h" //Contains all globals, typdefs, and enums






// Starts the game over - empties the board, creates new tiles, resets line counters
void restart()
{



	initBoard();

	for(int x=0;x<10;x++) {
		for(int y = 0; y<20; y++) {
			board_colors[x][y] = vec4(0,0,0,0);
			board[x][y] = false;
		}
	}

	updateTop();
	newtile();
	timer=0;
	running = true;

}
//-------------------------------------------------------------------------------------------------------------------
void setMVP(mat4 &mvp) {
	glUniformMatrix4fv(MVPlocation, 1, GL_TRUE, mvp);
}
// Draws the game
void display()
{

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	Projection = Perspective(50, 1.0*xsize/ysize, 1, 100);
	// Scale everything to unit length
	mat4 Model = mat4();
	Model *= Translate(0, BOARD_HEIGHT/2.0, 0);
	Model *= Scale(1.0/33, 1.0/33, 1.0/33);  // scale to unit length
	Model *= Translate(-33*BOARD_WIDTH/2.0 - 33, -33*BOARD_HEIGHT/2.0 - 33, 0); // move to origin

	mat4 MVP = Projection * View * Model;
	setMVP(MVP);

	glUniform1i(locxsize, xsize); // x and y sizes are passed to the shader program to maintain shape of the vertices on screen
	glUniform1i(locysize, ysize);

	glBindVertexArray(vaoIDs[VAOBoard]); // Bind the VAO representing the grid cells (to be drawn first)
	glDrawArrays(GL_TRIANGLES, 0, 1200); // Draw the board (10*20*2 = 400 triangles)

	glBindVertexArray(vaoIDs[VAOTile]); // Bind the VAO representing the current tile (to be drawn on top of the board)
	glDrawArrays(GL_TRIANGLES, 0, 24); // Draw the current tile (8 triangles)

	glBindVertexArray(vaoIDs[VAOGrid]); // Bind the VAO representing the grid lines (to be drawn on top of everything else)
	glDrawArrays(GL_LINES, 0, 64); // Draw the grid lines (21+11 = 32 lines)


	glutSwapBuffers();
}

//-------------------------------------------------------------------------------------------------------------------

// Reshape callback will simply change xsize and ysize variables, which are passed to the vertex shader
// to keep the game the same from stretching if the window is stretched
void reshape(GLsizei w, GLsizei h)
{
	xsize = w;
	ysize = h;
	glViewport(0, 0, w, h);
}

//-------------------------------------------------------------------------------------------------------------------

// Handle arrow key keypresses
void special(int key, int x, int y)
{
	switch (key)
	{
	case GLUT_KEY_LEFT:

		movetile( vec2(-1,0) );
		updatetile();

		break;
	case GLUT_KEY_RIGHT:

		movetile( vec2(1,0) );
		updatetile();

		break;
	case GLUT_KEY_UP:

		rotate();

		break;
	case GLUT_KEY_DOWN:

		if(movetile( vec2(0,-1) ) ) {
			updatetile();
		} else {
			settile();
		}

		break;
	}
	glutPostRedisplay();
}

//-------------------------------------------------------------------------------------------------------------------

// Handles standard keypresses
void keyboard(unsigned char key, int x, int y)
{
	if(debug) {cout<<"Key is.. "<<key<<endl;}
	switch(key) 
	{
	case 033: // Both escape key and 'q' cause the game to exit
		exit(EXIT_SUCCESS);
		break;
	case 'q':
		exit (EXIT_SUCCESS);
		break;
	case ' ': // 'r' key restarts the game
		shiftColors();
		break;
	case 'p': //mostly for debugging (suspends movement)
		if(pause_b)
			pause_b=false;
		else
			pause_b=true;
		break;
	case 'r': // 'r' key restarts the game
		restart();
		break;
	case 't':
		//testFindShape(findShape(0,0));
		break;
	}
	glutPostRedisplay();

}

//-------------------------------------------------------------------------------------------------------------------

void move_down (int i) {

	if(movetile( vec2(0,-1) ) ) {
		updatetile();
	} else {
		settile();
	}
	timer++;
	glutTimerFunc(TIME_PER_MOVE, move_down, 0);

}

void idle(void)
{
	if(running) {
		fixOrphans( findOrphans());
		glutPostRedisplay();
	}

}




//-------------------------------------------------------------------------------------------------------------------

int main(int argc, char **argv)
{
	srand (time(NULL)); //initiate random seed
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_MULTISAMPLE );
	glutInitWindowSize(xsize, ysize);
	glutInitWindowPosition(680, 178); // Center the game window (well, on a 1920x1080 display)
	glutCreateWindow("Fruit Tetris");
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glEnable( GL_BLEND );

	glewInit();
	init();
	// start thread
	// Callback functions
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutSpecialFunc(special);
	glutKeyboardFunc(keyboard);
	glutIdleFunc(idle);
	glutTimerFunc(TIME_PER_MOVE, move_down, 0);
	glutMainLoop(); // Start main loop

	return 0;
}
